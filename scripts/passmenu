#!/usr/bin/env bash

shopt -s nullglob globstar

typeit=false
if [[ $1 == "--type" ]]; then
    typeit=true
    shift
fi
choose=false
password_only=false
if [[ $1 == "--choose" ]]; then
    choose=true
    shift
fi

prefix=${PASSWORD_STORE_DIR-~/.password-store}
lastcache="/tmp/$USER/nextpass"
if [[ -f "$lastcache" ]] && ! $choose; then
    password="$(cat "$lastcache")"
fi

if [[ -z "$password" ]]; then
    rankfile=${XDG_CACHE_DIR-$HOME/.cache}
    rankfile_tmp="$rankfile/passmenu-1.cache"
    rankfile="$rankfile/passmenu.cache"
    [ -e "$rankfile"  ] || touch "$rankfile"
    password_files=( "$prefix"/**/*.gpg )
    password_files=( "${password_files[@]#"$prefix"/}" )
    password_files=( "${password_files[@]%.gpg}" )
    printf '%s\n' "${password_files[@]}" |
        sed -f <(sed 's/^\([0-9]\+\) \(.*\)$/s#^\2$#\1 \&#;t/;
            s/^-1 \(.*\)$/s#^\1.*#-1 \1#;t/' < "$rankfile";
            printf 's/^/0 /\n') |
        sort -nsr > "$rankfile_tmp"

    password=$(sed '/^-1 /d;s/^[0-9]* //' < "$rankfile_tmp" | rofi -dmenu -format d -no-custom)

    if [[ -z $password ]]; then
        mv "$rankfile_tmp" "$rankfile"
        exit
    fi

    #shellcheck disable=2016
    password="$(sed -i "$password"'{s/^\([0-9]*\) \(.*\)$/echo "$((\1+1)) \2"/;e'$'\n'';w /dev/stdout'$'\n}' "$rankfile_tmp" | cut -d\  -f2-)"
    mv "$rankfile_tmp" "$rankfile"
fi

case "$password" in
    ssh/*)
        expect - -- \
        "$(pass show "$password" | sed -n 's,\($HOME\|~\),'"$HOME"',g;2p')" \
        "$(pass show "$password" | sed -n '1p')" << "EOF"
        set file [lindex $argv 0]
        set password [lindex $argv 1]
        spawn ssh-add "$file"
        expect "Enter passphrase for $file:"
        send "$password\n"
        expect "Identity added: $file *"
        wait
        close
EOF
    if ! $choose; then
        if pgrep '\<[s]sh\>' &>/dev/null; then
            password_only=true
        else
            exit
        fi
    fi
    ;;
esac

line=1
if [[ -z "$(pass show "$password" | sed -n 1p)" ]]; then
    choose=true
fi
if $choose; then
    line=$(pass show "$password" |
        sed '1{s/.\+/Password/;t};2{s/.\+/Login/;t};/^\s*\([-0-9A-Za-z_ ]*\)\s*: .*/{s//\1/;t};s/^.\+$/?/' |
        rofi -dmenu -format d -no-custom)
    [ -z "$line" ] && exit
    [ -f "$lastcache" ] && rm "$lastcache"
elif [[ -e "$lastcache" ]]; then
    line=1
    rm "$lastcache"
elif ! $password_only && [[ "$(pass show "$password" | wc -l)" -gt 1 ]] && [[ -n "$(pass show "$password" | sed -n 2p)" ]]; then
    line=2
    [ -d "/tmp/$USER" ] || mkdir -p "/tmp/$USER"
    echo "$password" > "$lastcache"
fi

if ! $typeit; then
    pass show -c"$line" "$password" 2>/dev/null
    sel="${PASSWORD_STORE_X_SELECTION:-clipboard}"
    pass="$(xclip -o -selection "$sel")"
    #shellcheck disable=2001
    sed 's/^\s*\([-0-9A-Za-z_ ]*\)\s*: //' <<< "$pass" | xclip -rmlastnl -selection "$sel"
    unset pass
else
    delay=48 # in ms
    typecmd='\x00type\x00--clearmodifiers\x00--delay\x00'"$delay"'\x00'
    keycmd='\x00sleep\x00'"$(printf 'scale=3;%s/1000\n' "$delay"| bc)"'\x00key\x00--clearmodifiers\x00'
    pass show "$password" | sed -n "$line"'{s/^\s*\([-0-9A-Za-z_ ]*\)\s*: //;p}' |
        sed 's/[^`^´~]\+/'"$typecmd"'&/g
             s/\^/'"$keycmd"'asciicircum/g
             s/`/'"$keycmd"'grave/g
             s/´/'"$keycmd"'acute/g
             s/~/'"$keycmd"'asciitilde/g' |
        sed 's/^\x00*//' | sed -z 's/\n$//' |
        xargs -0 -n 5 xdotool
fi

lastpassimp=${XDG_CACHE_DIR-$HOME/.cache}/passmenu-importantlast
if [ -z "$(find "$lastpassimp" -mtime -7 -print)" ]; then
    while read -r imp; do
        pinentry_commands="
SETTITLE Password Reminder
SETDESC Enter password for $imp
SETTIMEOUT 300
GETPIN
BYE
"
        pinentry_out="$(pinentry <<< "$pinentry_commands" | sed '/^OK/d')"
        source "$SCRIPT_ROOT/scripts/notify.sh"
        if grep '^D ' <<< "$pinentry_out" -q; then
            if [ "$(sed -n '/^D /s/^D //p' <<< "$pinentry_out")" == "$(pass show "$imp" | head -n 1)" ]; then
                continue
            else
                # sed -n '/^D /s/^D //p' <<< "$pinentry_out"
                # pass show "$imp" | head -n 1
                notify 'Password incorrect' 'Will ask next time!' -u critical -a 'passmenu'
            fi
        else
                notify 'Password skipped' 'Will ask next time!' -u critical -a 'passmenu'
        fi
        exit 1
    done < "$SCRIPT_ROOT/data/shared/passimportant"
    touch "$lastpassimp"
fi

#!/usr/bin/env bash

shopt -s nullglob globstar
export ROFI_ACCENT=47.6 ROFI_ICONS=false
THIS="$(readlink -f "$(command -v "$0")")" # path to script
TDIR="$(dirname "$THIS")"
samelength=true # a little more secure
source "$TDIR/key_to_code.sh"

if  [ "$XDG_SESSION_TYPE" = wayland ]; then
    COPY=(wl-copy -n)
    PASTE=(wl-paste -n)
else
    COPY=(xclip -sel c -r)
    PASTE=(xclip -sel c -o)
fi

increment() {
    if [ -n "${passwordnr}" ]; then
        if [[ -f "$lastpass" && "$password" != $(cat "$lastpass") ]] || [[ -n "$(find "$lastpass" -mmin +5 -print)" ]]; then
            # do not increment count if selected password was acessed less than 5 min ago
            #shellcheck disable=2016
            sed -i "$passwordnr"'{s/^\([0-9]*\) \(.*\)$/echo "$((\1+1)) \2"/;e'$'\n}' "$rankfile"
            return
        fi
        echo "$password" > "$lastpass"
    fi
}

typeit=false
if [[ ${1-} == "-t" ]]; then
    typeit=true
    shift
fi
choose=false
select=
if [[ ${1-} == "-s" ]]; then
    shift
    if [[ ${1-} =~ [0-9]+ ]]; then
        select=$1
        shift
    else
        choose=true
    fi
fi

prefix=${PASSWORD_STORE_DIR-~/.password-store}
lastcache="/tmp/$USER/nextpass"
lastpass="/tmp/$USER/lastpass"

if [ -f "$lastcache" ] && [ -n "$(find "$lastcache" -mmin +2 -print)" ]; then
    rm -r "$lastcache"
fi

if [[ -f "$lastcache" ]] && ! $choose; then
    password="$(cat "$lastcache")"
fi

if [[ -z "${password-}" ]]; then
    rankfile=${XDG_CACHE_DIR-$HOME/.cache}
    rankfile="$rankfile/passmenu.cache"
    [ -e "$rankfile"  ] || touch "$rankfile"
    password_files=( "$prefix"/**/*.gpg )
    password_files=( "${password_files[@]#"$prefix"/}" )
    password_files=( "${password_files[@]%.gpg}" )
    rankfile_tmp="$(printf '%s\n' "${password_files[@]}" |
        sed -f <(sed 's/^\([0-9]\+\) \(.*\)$/s#^\2$#\1 \&#;t/;
            s/^-1 \(.*\)$/s#^\1.*#-1 \1#;t/' < "$rankfile";
            printf 's/^/0 /\n') |
                sort -nsr)"

    passwordnr=$(sed '/^-1 /d;s/^[0-9]* //' <<< "$rankfile_tmp" | rofi -dmenu -format d -p Password -no-custom)
    if [[ -z $passwordnr ]]; then
        exit
    fi
    password=$(sed -n "${passwordnr}s/^[0-9]* //p" <<< "$rankfile_tmp")

    echo "$rankfile_tmp" > "$rankfile"
fi

pass_content="$(pass show "$password")" || exit "$?"

case "$password" in
    ssh/*)
        #shellcheck disable=2016
        expect <(cat << "EOF"
        set filefp [open [lindex $argv 0] r]
        set passwordfp [open [lindex $argv 1] r]
        set file [read $filefp]
        set password [read $passwordfp]
        close $filefp
        close $passwordfp
        spawn ssh-add "$file"
        expect "Enter passphrase for $file:"
        send "$password\n"
        expect "Identity added: $file *"
        wait
        close
EOF
) -- \
        <(sed -n 's,\($HOME\|~\),'"$HOME"',g;2p' <<< "$pass_content" | tr -d '\n') \
        <(sed -n '1p' <<< "$pass_content" | tr -d '\n')
    if ! $choose && [ -z "$select" ]; then
        if pgrep '^ssh$' &>/dev/null; then
            select=1
        else
            increment
            exit
        fi
    fi
    ;;
esac

line=${select-1}
if [[ -z "$(sed -n "${line}p" <<< "$pass_content" )" ]]; then
    choose=true
fi
if $choose; then
    line=$(sed <<< "$pass_content" '
            1{s/.\+/Password/;t};
            2{s/.\+/Login/;t};
            /^\s*\(\([^:]*:[^ ]\)*[^:]*\):\s*$/{s//\1:/;t};
            /^\s*\(\([^:]*:[^ ]\)*[^:]*\): .*/{s//\1/;t};
            s/^.\+$/?/' |
        rofi -dmenu -format d -no-custom -p 'Select Entry')
    [ -z "$line" ] && exit
    [ -f "$lastcache" ] && rm "$lastcache"
elif [ -n "$select" ]; then
    [ -f "$lastcache" ] && rm "$lastcache"
elif [[ -e "$lastcache" ]]; then
    line=1
    rm "$lastcache"
elif [[ "$(wc -l <<< "$pass_content")" -gt 1 ]] && [[ -n "$(sed -n 2p <<< "$pass_content")" ]]; then
    line=2
    [ -d "/tmp/$USER" ] || mkdir -p "/tmp/$USER"
    echo "$password" > "$lastcache"
fi

if ! $typeit; then
    pass show -c"$line" "$password" 2>/dev/null
    pass="$("${PASTE[@]}")"
    #shellcheck disable=2001
    if [ "$line" -gt 2 ]; then
        sed '/^\s*\(\([^:]*:[^ ]\)*[^:]*: .*\)//';
    else cat;
    fi <<< "$pass" | "${COPY[@]}"
else
    sed -n "$line"'{3,$s/^\s*\(\([^:]*:[^ ]\)*[^:]*\): \?//;p}' <<< "$pass_content" |
        stdin_to_ydotool_codes | xargs ydotool key
fi
increment

lastpassimp=${XDG_CACHE_DIR-$HOME/.cache}/passmenu-importantlast
if [ -z "$(find "$lastpassimp" -mtime -14 -print)" ]; then
    while read -r imp; do
        pinentry_commands="
SETTITLE Password Reminder
SETDESC Enter password for $imp
SETTIMEOUT 300
GETPIN
BYE
"
        pinentry_out="$(pinentry <<< "$pinentry_commands" | sed '/^OK/d')"
        #shellcheck disable=1091
        source "$SCRIPT_ROOT/scripts/notify.sh"
        if grep '^D ' <<< "$pinentry_out" -q; then
            if [ "$(sed -n '/^D /s/^D //p' <<< "$pinentry_out")" == "$(pass show "$imp" | head -n 1)" ]; then
                continue
            else
                notify 'Password incorrect' 'Will ask next time!' -u critical -a 'passmenu'
            fi
        else
                notify 'Password skipped' 'Will ask next time!' -u critical -a 'passmenu'
        fi
        exit 1
    done < "$SCRIPT_ROOT/data/shared/passimportant"
    touch "$lastpassimp"
fi
